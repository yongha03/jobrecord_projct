plugins {
    id 'java'
    id 'org.springframework.boot' version '3.4.4'
    id 'io.spring.dependency-management' version '1.1.6'
    id 'checkstyle'
    id 'com.diffplug.spotless' version '6.25.0'
}

group = 'com.jobproj'
version = '0.0.1-SNAPSHOT'

java { toolchain { languageVersion = JavaLanguageVersion.of(17) } }

repositories { mavenCentral() }

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-jdbc'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.security:spring-security-crypto'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'

    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    runtimeOnly 'com.mysql:mysql-connector-j'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    implementation 'org.springframework.boot:spring-boot-starter-security'

    implementation 'io.jsonwebtoken:jjwt-api:0.12.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.12.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.12.5'
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
    options.compilerArgs += ['-Xlint:deprecation','-Xlint:unchecked']
}

tasks.test { useJUnitPlatform() }

checkstyle {
    toolVersion = '10.18.2'
    def cfg = file("$rootDir/config/checkstyle/checkstyle.xml")
    if (cfg.exists()) configFile = cfg
}

spotless {
    java {
        googleJavaFormat('1.22.0')
        indentWithSpaces(2)
        trimTrailingWhitespace()
        endWithNewline()
    }
}

tasks.check {
    dependsOn 'spotlessCheck', 'checkstyleMain', 'checkstyleTest'
}
tasks.build {
    dependsOn 'spotlessApply'
}
